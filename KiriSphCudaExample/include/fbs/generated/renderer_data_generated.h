// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERERDATA_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_RENDERERDATA_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "basic_types_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct SSFData;
struct SSFDataBuilder;

struct SSFData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SSFDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLUID_TRANSPARENT_MODE = 4,
    VT_SOILD_PARTICLE_MODE = 6
  };
  bool fluid_transparent_mode() const {
    return GetField<uint8_t>(VT_FLUID_TRANSPARENT_MODE, 0) != 0;
  }
  bool soild_particle_mode() const {
    return GetField<uint8_t>(VT_SOILD_PARTICLE_MODE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FLUID_TRANSPARENT_MODE) &&
           VerifyField<uint8_t>(verifier, VT_SOILD_PARTICLE_MODE) &&
           verifier.EndTable();
  }
};

struct SSFDataBuilder {
  typedef SSFData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fluid_transparent_mode(bool fluid_transparent_mode) {
    fbb_.AddElement<uint8_t>(SSFData::VT_FLUID_TRANSPARENT_MODE, static_cast<uint8_t>(fluid_transparent_mode), 0);
  }
  void add_soild_particle_mode(bool soild_particle_mode) {
    fbb_.AddElement<uint8_t>(SSFData::VT_SOILD_PARTICLE_MODE, static_cast<uint8_t>(soild_particle_mode), 0);
  }
  explicit SSFDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SSFData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SSFData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SSFData> CreateSSFData(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool fluid_transparent_mode = false,
    bool soild_particle_mode = false) {
  SSFDataBuilder builder_(_fbb);
  builder_.add_soild_particle_mode(soild_particle_mode);
  builder_.add_fluid_transparent_mode(fluid_transparent_mode);
  return builder_.Finish();
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_RENDERERDATA_KIRI_FLATBUFFERS_H_
