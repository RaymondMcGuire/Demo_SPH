// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CUDASEEPAGEFLOWDATA_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CUDASEEPAGEFLOWDATA_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "basic_types_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct CudaSeepageFlowData;
struct CudaSeepageFlowDataBuilder;

struct CudaSeepageFlowData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CudaSeepageFlowDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPH_MASS = 4,
    VT_SPH_DENSITY = 6,
    VT_SPH_PARTICLE_RADIUS = 8,
    VT_SPH_KERNEL_RADIUS = 10,
    VT_SPH_STIFF = 12,
    VT_SPH_VISC = 14,
    VT_SPH_NU = 16,
    VT_SPH_BNU = 18,
    VT_DEM_MASS = 20,
    VT_DEM_DENSITY = 22,
    VT_DEM_PARTICLE_RADIUS = 24,
    VT_DEM_YOUNG = 26,
    VT_DEM_POISSON = 28,
    VT_DEM_FRICTION_ANGLE = 30,
    VT_DEM_DAMPING = 32,
    VT_SF_C0 = 34,
    VT_SF_CSAT = 36,
    VT_SF_CMC = 38,
    VT_SF_CMC_P = 40,
    VT_SF_CD = 42,
    VT_SF_A0 = 44,
    VT_SF_ASAT = 46,
    VT_SF_AMC = 48,
    VT_SF_AMC_P = 50,
    VT_SF_DRY_SAND_COLOR = 52,
    VT_SF_WET_SAND_COLOR = 54,
    VT_GRAVITY = 56
  };
  float sph_mass() const {
    return GetField<float>(VT_SPH_MASS, 0.0f);
  }
  float sph_density() const {
    return GetField<float>(VT_SPH_DENSITY, 0.0f);
  }
  float sph_particle_radius() const {
    return GetField<float>(VT_SPH_PARTICLE_RADIUS, 0.0f);
  }
  float sph_kernel_radius() const {
    return GetField<float>(VT_SPH_KERNEL_RADIUS, 0.0f);
  }
  float sph_stiff() const {
    return GetField<float>(VT_SPH_STIFF, 0.0f);
  }
  float sph_visc() const {
    return GetField<float>(VT_SPH_VISC, 0.0f);
  }
  float sph_nu() const {
    return GetField<float>(VT_SPH_NU, 0.0f);
  }
  float sph_bnu() const {
    return GetField<float>(VT_SPH_BNU, 0.0f);
  }
  float dem_mass() const {
    return GetField<float>(VT_DEM_MASS, 0.0f);
  }
  float dem_density() const {
    return GetField<float>(VT_DEM_DENSITY, 0.0f);
  }
  float dem_particle_radius() const {
    return GetField<float>(VT_DEM_PARTICLE_RADIUS, 0.0f);
  }
  float dem_young() const {
    return GetField<float>(VT_DEM_YOUNG, 0.0f);
  }
  float dem_poisson() const {
    return GetField<float>(VT_DEM_POISSON, 0.0f);
  }
  float dem_friction_angle() const {
    return GetField<float>(VT_DEM_FRICTION_ANGLE, 0.0f);
  }
  float dem_damping() const {
    return GetField<float>(VT_DEM_DAMPING, 0.0f);
  }
  float sf_c0() const {
    return GetField<float>(VT_SF_C0, 0.0f);
  }
  float sf_csat() const {
    return GetField<float>(VT_SF_CSAT, 0.0f);
  }
  float sf_cmc() const {
    return GetField<float>(VT_SF_CMC, 0.0f);
  }
  float sf_cmc_p() const {
    return GetField<float>(VT_SF_CMC_P, 0.0f);
  }
  float sf_cd() const {
    return GetField<float>(VT_SF_CD, 0.0f);
  }
  float sf_a0() const {
    return GetField<float>(VT_SF_A0, 0.0f);
  }
  float sf_asat() const {
    return GetField<float>(VT_SF_ASAT, 0.0f);
  }
  float sf_amc() const {
    return GetField<float>(VT_SF_AMC, 0.0f);
  }
  float sf_amc_p() const {
    return GetField<float>(VT_SF_AMC_P, 0.0f);
  }
  const KIRI::FlatBuffers::float3 *sf_dry_sand_color() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_SF_DRY_SAND_COLOR);
  }
  const KIRI::FlatBuffers::float3 *sf_wet_sand_color() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_SF_WET_SAND_COLOR);
  }
  const KIRI::FlatBuffers::float3 *gravity() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_GRAVITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_SPH_MASS) &&
           VerifyField<float>(verifier, VT_SPH_DENSITY) &&
           VerifyField<float>(verifier, VT_SPH_PARTICLE_RADIUS) &&
           VerifyField<float>(verifier, VT_SPH_KERNEL_RADIUS) &&
           VerifyField<float>(verifier, VT_SPH_STIFF) &&
           VerifyField<float>(verifier, VT_SPH_VISC) &&
           VerifyField<float>(verifier, VT_SPH_NU) &&
           VerifyField<float>(verifier, VT_SPH_BNU) &&
           VerifyField<float>(verifier, VT_DEM_MASS) &&
           VerifyField<float>(verifier, VT_DEM_DENSITY) &&
           VerifyField<float>(verifier, VT_DEM_PARTICLE_RADIUS) &&
           VerifyField<float>(verifier, VT_DEM_YOUNG) &&
           VerifyField<float>(verifier, VT_DEM_POISSON) &&
           VerifyField<float>(verifier, VT_DEM_FRICTION_ANGLE) &&
           VerifyField<float>(verifier, VT_DEM_DAMPING) &&
           VerifyField<float>(verifier, VT_SF_C0) &&
           VerifyField<float>(verifier, VT_SF_CSAT) &&
           VerifyField<float>(verifier, VT_SF_CMC) &&
           VerifyField<float>(verifier, VT_SF_CMC_P) &&
           VerifyField<float>(verifier, VT_SF_CD) &&
           VerifyField<float>(verifier, VT_SF_A0) &&
           VerifyField<float>(verifier, VT_SF_ASAT) &&
           VerifyField<float>(verifier, VT_SF_AMC) &&
           VerifyField<float>(verifier, VT_SF_AMC_P) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_SF_DRY_SAND_COLOR) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_SF_WET_SAND_COLOR) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_GRAVITY) &&
           verifier.EndTable();
  }
};

struct CudaSeepageFlowDataBuilder {
  typedef CudaSeepageFlowData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sph_mass(float sph_mass) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_MASS, sph_mass, 0.0f);
  }
  void add_sph_density(float sph_density) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_DENSITY, sph_density, 0.0f);
  }
  void add_sph_particle_radius(float sph_particle_radius) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_PARTICLE_RADIUS, sph_particle_radius, 0.0f);
  }
  void add_sph_kernel_radius(float sph_kernel_radius) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_KERNEL_RADIUS, sph_kernel_radius, 0.0f);
  }
  void add_sph_stiff(float sph_stiff) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_STIFF, sph_stiff, 0.0f);
  }
  void add_sph_visc(float sph_visc) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_VISC, sph_visc, 0.0f);
  }
  void add_sph_nu(float sph_nu) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_NU, sph_nu, 0.0f);
  }
  void add_sph_bnu(float sph_bnu) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SPH_BNU, sph_bnu, 0.0f);
  }
  void add_dem_mass(float dem_mass) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_MASS, dem_mass, 0.0f);
  }
  void add_dem_density(float dem_density) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_DENSITY, dem_density, 0.0f);
  }
  void add_dem_particle_radius(float dem_particle_radius) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_PARTICLE_RADIUS, dem_particle_radius, 0.0f);
  }
  void add_dem_young(float dem_young) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_YOUNG, dem_young, 0.0f);
  }
  void add_dem_poisson(float dem_poisson) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_POISSON, dem_poisson, 0.0f);
  }
  void add_dem_friction_angle(float dem_friction_angle) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_FRICTION_ANGLE, dem_friction_angle, 0.0f);
  }
  void add_dem_damping(float dem_damping) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_DEM_DAMPING, dem_damping, 0.0f);
  }
  void add_sf_c0(float sf_c0) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_C0, sf_c0, 0.0f);
  }
  void add_sf_csat(float sf_csat) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_CSAT, sf_csat, 0.0f);
  }
  void add_sf_cmc(float sf_cmc) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_CMC, sf_cmc, 0.0f);
  }
  void add_sf_cmc_p(float sf_cmc_p) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_CMC_P, sf_cmc_p, 0.0f);
  }
  void add_sf_cd(float sf_cd) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_CD, sf_cd, 0.0f);
  }
  void add_sf_a0(float sf_a0) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_A0, sf_a0, 0.0f);
  }
  void add_sf_asat(float sf_asat) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_ASAT, sf_asat, 0.0f);
  }
  void add_sf_amc(float sf_amc) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_AMC, sf_amc, 0.0f);
  }
  void add_sf_amc_p(float sf_amc_p) {
    fbb_.AddElement<float>(CudaSeepageFlowData::VT_SF_AMC_P, sf_amc_p, 0.0f);
  }
  void add_sf_dry_sand_color(const KIRI::FlatBuffers::float3 *sf_dry_sand_color) {
    fbb_.AddStruct(CudaSeepageFlowData::VT_SF_DRY_SAND_COLOR, sf_dry_sand_color);
  }
  void add_sf_wet_sand_color(const KIRI::FlatBuffers::float3 *sf_wet_sand_color) {
    fbb_.AddStruct(CudaSeepageFlowData::VT_SF_WET_SAND_COLOR, sf_wet_sand_color);
  }
  void add_gravity(const KIRI::FlatBuffers::float3 *gravity) {
    fbb_.AddStruct(CudaSeepageFlowData::VT_GRAVITY, gravity);
  }
  explicit CudaSeepageFlowDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CudaSeepageFlowData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CudaSeepageFlowData>(end);
    return o;
  }
};

inline flatbuffers::Offset<CudaSeepageFlowData> CreateCudaSeepageFlowData(
    flatbuffers::FlatBufferBuilder &_fbb,
    float sph_mass = 0.0f,
    float sph_density = 0.0f,
    float sph_particle_radius = 0.0f,
    float sph_kernel_radius = 0.0f,
    float sph_stiff = 0.0f,
    float sph_visc = 0.0f,
    float sph_nu = 0.0f,
    float sph_bnu = 0.0f,
    float dem_mass = 0.0f,
    float dem_density = 0.0f,
    float dem_particle_radius = 0.0f,
    float dem_young = 0.0f,
    float dem_poisson = 0.0f,
    float dem_friction_angle = 0.0f,
    float dem_damping = 0.0f,
    float sf_c0 = 0.0f,
    float sf_csat = 0.0f,
    float sf_cmc = 0.0f,
    float sf_cmc_p = 0.0f,
    float sf_cd = 0.0f,
    float sf_a0 = 0.0f,
    float sf_asat = 0.0f,
    float sf_amc = 0.0f,
    float sf_amc_p = 0.0f,
    const KIRI::FlatBuffers::float3 *sf_dry_sand_color = 0,
    const KIRI::FlatBuffers::float3 *sf_wet_sand_color = 0,
    const KIRI::FlatBuffers::float3 *gravity = 0) {
  CudaSeepageFlowDataBuilder builder_(_fbb);
  builder_.add_gravity(gravity);
  builder_.add_sf_wet_sand_color(sf_wet_sand_color);
  builder_.add_sf_dry_sand_color(sf_dry_sand_color);
  builder_.add_sf_amc_p(sf_amc_p);
  builder_.add_sf_amc(sf_amc);
  builder_.add_sf_asat(sf_asat);
  builder_.add_sf_a0(sf_a0);
  builder_.add_sf_cd(sf_cd);
  builder_.add_sf_cmc_p(sf_cmc_p);
  builder_.add_sf_cmc(sf_cmc);
  builder_.add_sf_csat(sf_csat);
  builder_.add_sf_c0(sf_c0);
  builder_.add_dem_damping(dem_damping);
  builder_.add_dem_friction_angle(dem_friction_angle);
  builder_.add_dem_poisson(dem_poisson);
  builder_.add_dem_young(dem_young);
  builder_.add_dem_particle_radius(dem_particle_radius);
  builder_.add_dem_density(dem_density);
  builder_.add_dem_mass(dem_mass);
  builder_.add_sph_bnu(sph_bnu);
  builder_.add_sph_nu(sph_nu);
  builder_.add_sph_visc(sph_visc);
  builder_.add_sph_stiff(sph_stiff);
  builder_.add_sph_kernel_radius(sph_kernel_radius);
  builder_.add_sph_particle_radius(sph_particle_radius);
  builder_.add_sph_density(sph_density);
  builder_.add_sph_mass(sph_mass);
  return builder_.Finish();
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_CUDASEEPAGEFLOWDATA_KIRI_FLATBUFFERS_H_
