// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEMDATA_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_DEMDATA_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "basic_types_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct DemBoxEmitter;
struct DemBoxEmitterBuilder;

struct DemShapeSampling;
struct DemShapeSamplingBuilder;

struct DemData;
struct DemDataBuilder;

struct DemBoxEmitter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DemBoxEmitterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLE = 4,
    VT_BOX_LOWER = 6,
    VT_BOX_UPPER = 8,
    VT_BOX_SIZE = 10,
    VT_BOX_COLOR = 12
  };
  bool enable() const {
    return GetField<uint8_t>(VT_ENABLE, 0) != 0;
  }
  const KIRI::FlatBuffers::float3 *box_lower() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_BOX_LOWER);
  }
  const KIRI::FlatBuffers::float3 *box_upper() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_BOX_UPPER);
  }
  const KIRI::FlatBuffers::int3 *box_size() const {
    return GetStruct<const KIRI::FlatBuffers::int3 *>(VT_BOX_SIZE);
  }
  const KIRI::FlatBuffers::float3 *box_color() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_BOX_COLOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_BOX_LOWER) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_BOX_UPPER) &&
           VerifyField<KIRI::FlatBuffers::int3>(verifier, VT_BOX_SIZE) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_BOX_COLOR) &&
           verifier.EndTable();
  }
};

struct DemBoxEmitterBuilder {
  typedef DemBoxEmitter Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_enable(bool enable) {
    fbb_.AddElement<uint8_t>(DemBoxEmitter::VT_ENABLE, static_cast<uint8_t>(enable), 0);
  }
  void add_box_lower(const KIRI::FlatBuffers::float3 *box_lower) {
    fbb_.AddStruct(DemBoxEmitter::VT_BOX_LOWER, box_lower);
  }
  void add_box_upper(const KIRI::FlatBuffers::float3 *box_upper) {
    fbb_.AddStruct(DemBoxEmitter::VT_BOX_UPPER, box_upper);
  }
  void add_box_size(const KIRI::FlatBuffers::int3 *box_size) {
    fbb_.AddStruct(DemBoxEmitter::VT_BOX_SIZE, box_size);
  }
  void add_box_color(const KIRI::FlatBuffers::float3 *box_color) {
    fbb_.AddStruct(DemBoxEmitter::VT_BOX_COLOR, box_color);
  }
  explicit DemBoxEmitterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DemBoxEmitter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DemBoxEmitter>(end);
    return o;
  }
};

inline flatbuffers::Offset<DemBoxEmitter> CreateDemBoxEmitter(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool enable = false,
    const KIRI::FlatBuffers::float3 *box_lower = 0,
    const KIRI::FlatBuffers::float3 *box_upper = 0,
    const KIRI::FlatBuffers::int3 *box_size = 0,
    const KIRI::FlatBuffers::float3 *box_color = 0) {
  DemBoxEmitterBuilder builder_(_fbb);
  builder_.add_box_color(box_color);
  builder_.add_box_size(box_size);
  builder_.add_box_upper(box_upper);
  builder_.add_box_lower(box_lower);
  builder_.add_enable(enable);
  return builder_.Finish();
}

struct DemShapeSampling FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DemShapeSamplingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLE = 4,
    VT_FOLDER = 6,
    VT_FILE = 8,
    VT_OFFSET = 10,
    VT_RAMP_COLOR_ENABLE = 12,
    VT_OFFSET_YDIR_FORCE = 14
  };
  bool enable() const {
    return GetField<uint8_t>(VT_ENABLE, 0) != 0;
  }
  const flatbuffers::String *folder() const {
    return GetPointer<const flatbuffers::String *>(VT_FOLDER);
  }
  const flatbuffers::String *file() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE);
  }
  const KIRI::FlatBuffers::float3 *offset() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_OFFSET);
  }
  bool ramp_color_enable() const {
    return GetField<uint8_t>(VT_RAMP_COLOR_ENABLE, 0) != 0;
  }
  bool offset_ydir_force() const {
    return GetField<uint8_t>(VT_OFFSET_YDIR_FORCE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE) &&
           VerifyOffset(verifier, VT_FOLDER) &&
           verifier.VerifyString(folder()) &&
           VerifyOffset(verifier, VT_FILE) &&
           verifier.VerifyString(file()) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_OFFSET) &&
           VerifyField<uint8_t>(verifier, VT_RAMP_COLOR_ENABLE) &&
           VerifyField<uint8_t>(verifier, VT_OFFSET_YDIR_FORCE) &&
           verifier.EndTable();
  }
};

struct DemShapeSamplingBuilder {
  typedef DemShapeSampling Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_enable(bool enable) {
    fbb_.AddElement<uint8_t>(DemShapeSampling::VT_ENABLE, static_cast<uint8_t>(enable), 0);
  }
  void add_folder(flatbuffers::Offset<flatbuffers::String> folder) {
    fbb_.AddOffset(DemShapeSampling::VT_FOLDER, folder);
  }
  void add_file(flatbuffers::Offset<flatbuffers::String> file) {
    fbb_.AddOffset(DemShapeSampling::VT_FILE, file);
  }
  void add_offset(const KIRI::FlatBuffers::float3 *offset) {
    fbb_.AddStruct(DemShapeSampling::VT_OFFSET, offset);
  }
  void add_ramp_color_enable(bool ramp_color_enable) {
    fbb_.AddElement<uint8_t>(DemShapeSampling::VT_RAMP_COLOR_ENABLE, static_cast<uint8_t>(ramp_color_enable), 0);
  }
  void add_offset_ydir_force(bool offset_ydir_force) {
    fbb_.AddElement<uint8_t>(DemShapeSampling::VT_OFFSET_YDIR_FORCE, static_cast<uint8_t>(offset_ydir_force), 0);
  }
  explicit DemShapeSamplingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DemShapeSampling> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DemShapeSampling>(end);
    return o;
  }
};

inline flatbuffers::Offset<DemShapeSampling> CreateDemShapeSampling(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool enable = false,
    flatbuffers::Offset<flatbuffers::String> folder = 0,
    flatbuffers::Offset<flatbuffers::String> file = 0,
    const KIRI::FlatBuffers::float3 *offset = 0,
    bool ramp_color_enable = false,
    bool offset_ydir_force = false) {
  DemShapeSamplingBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_file(file);
  builder_.add_folder(folder);
  builder_.add_offset_ydir_force(offset_ydir_force);
  builder_.add_ramp_color_enable(ramp_color_enable);
  builder_.add_enable(enable);
  return builder_.Finish();
}

inline flatbuffers::Offset<DemShapeSampling> CreateDemShapeSamplingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool enable = false,
    const char *folder = nullptr,
    const char *file = nullptr,
    const KIRI::FlatBuffers::float3 *offset = 0,
    bool ramp_color_enable = false,
    bool offset_ydir_force = false) {
  auto folder__ = folder ? _fbb.CreateString(folder) : 0;
  auto file__ = file ? _fbb.CreateString(file) : 0;
  return KIRI::FlatBuffers::CreateDemShapeSampling(
      _fbb,
      enable,
      folder__,
      file__,
      offset,
      ramp_color_enable,
      offset_ydir_force);
}

struct DemData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REST_DENSITY = 4,
    VT_PARTICLE_RADIUS = 6,
    VT_DAMPING = 8,
    VT_YOUNG = 10,
    VT_POISSON = 12,
    VT_FRICTION_ANGLE = 14
  };
  float rest_density() const {
    return GetField<float>(VT_REST_DENSITY, 0.0f);
  }
  float particle_radius() const {
    return GetField<float>(VT_PARTICLE_RADIUS, 0.0f);
  }
  float damping() const {
    return GetField<float>(VT_DAMPING, 0.0f);
  }
  float young() const {
    return GetField<float>(VT_YOUNG, 0.0f);
  }
  float poisson() const {
    return GetField<float>(VT_POISSON, 0.0f);
  }
  float friction_angle() const {
    return GetField<float>(VT_FRICTION_ANGLE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_REST_DENSITY) &&
           VerifyField<float>(verifier, VT_PARTICLE_RADIUS) &&
           VerifyField<float>(verifier, VT_DAMPING) &&
           VerifyField<float>(verifier, VT_YOUNG) &&
           VerifyField<float>(verifier, VT_POISSON) &&
           VerifyField<float>(verifier, VT_FRICTION_ANGLE) &&
           verifier.EndTable();
  }
};

struct DemDataBuilder {
  typedef DemData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rest_density(float rest_density) {
    fbb_.AddElement<float>(DemData::VT_REST_DENSITY, rest_density, 0.0f);
  }
  void add_particle_radius(float particle_radius) {
    fbb_.AddElement<float>(DemData::VT_PARTICLE_RADIUS, particle_radius, 0.0f);
  }
  void add_damping(float damping) {
    fbb_.AddElement<float>(DemData::VT_DAMPING, damping, 0.0f);
  }
  void add_young(float young) {
    fbb_.AddElement<float>(DemData::VT_YOUNG, young, 0.0f);
  }
  void add_poisson(float poisson) {
    fbb_.AddElement<float>(DemData::VT_POISSON, poisson, 0.0f);
  }
  void add_friction_angle(float friction_angle) {
    fbb_.AddElement<float>(DemData::VT_FRICTION_ANGLE, friction_angle, 0.0f);
  }
  explicit DemDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DemData>(end);
    return o;
  }
};

inline flatbuffers::Offset<DemData> CreateDemData(
    flatbuffers::FlatBufferBuilder &_fbb,
    float rest_density = 0.0f,
    float particle_radius = 0.0f,
    float damping = 0.0f,
    float young = 0.0f,
    float poisson = 0.0f,
    float friction_angle = 0.0f) {
  DemDataBuilder builder_(_fbb);
  builder_.add_friction_angle(friction_angle);
  builder_.add_poisson(poisson);
  builder_.add_young(young);
  builder_.add_damping(damping);
  builder_.add_particle_radius(particle_radius);
  builder_.add_rest_density(rest_density);
  return builder_.Finish();
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_DEMDATA_KIRI_FLATBUFFERS_H_
