// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CUDADEMAPP_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CUDADEMAPP_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "app_data_generated.h"
#include "basic_types_generated.h"
#include "cuda_dem_data_generated.h"
#include "renderer_data_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct CudaDemApp;
struct CudaDemAppBuilder;

struct CudaDemApp FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CudaDemAppBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEM_DATA = 4,
    VT_DEM_SOLVER_TYPE = 6,
    VT_INIT_VOLUME = 8,
    VT_MAX_PARTICLES_NUM = 10,
    VT_APP_DATA = 12,
    VT_RENDERER_DATA = 14
  };
  const KIRI::FlatBuffers::CudaDemData *dem_data() const {
    return GetPointer<const KIRI::FlatBuffers::CudaDemData *>(VT_DEM_DATA);
  }
  KIRI::FlatBuffers::CudaDemType dem_solver_type() const {
    return static_cast<KIRI::FlatBuffers::CudaDemType>(GetField<int8_t>(VT_DEM_SOLVER_TYPE, 0));
  }
  const KIRI::FlatBuffers::DemInitBoxVolume *init_volume() const {
    return GetPointer<const KIRI::FlatBuffers::DemInitBoxVolume *>(VT_INIT_VOLUME);
  }
  uint32_t max_particles_num() const {
    return GetField<uint32_t>(VT_MAX_PARTICLES_NUM, 0);
  }
  const KIRI::FlatBuffers::AppData *app_data() const {
    return GetPointer<const KIRI::FlatBuffers::AppData *>(VT_APP_DATA);
  }
  const KIRI::FlatBuffers::SSFData *renderer_data() const {
    return GetPointer<const KIRI::FlatBuffers::SSFData *>(VT_RENDERER_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEM_DATA) &&
           verifier.VerifyTable(dem_data()) &&
           VerifyField<int8_t>(verifier, VT_DEM_SOLVER_TYPE) &&
           VerifyOffset(verifier, VT_INIT_VOLUME) &&
           verifier.VerifyTable(init_volume()) &&
           VerifyField<uint32_t>(verifier, VT_MAX_PARTICLES_NUM) &&
           VerifyOffset(verifier, VT_APP_DATA) &&
           verifier.VerifyTable(app_data()) &&
           VerifyOffset(verifier, VT_RENDERER_DATA) &&
           verifier.VerifyTable(renderer_data()) &&
           verifier.EndTable();
  }
};

struct CudaDemAppBuilder {
  typedef CudaDemApp Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dem_data(flatbuffers::Offset<KIRI::FlatBuffers::CudaDemData> dem_data) {
    fbb_.AddOffset(CudaDemApp::VT_DEM_DATA, dem_data);
  }
  void add_dem_solver_type(KIRI::FlatBuffers::CudaDemType dem_solver_type) {
    fbb_.AddElement<int8_t>(CudaDemApp::VT_DEM_SOLVER_TYPE, static_cast<int8_t>(dem_solver_type), 0);
  }
  void add_init_volume(flatbuffers::Offset<KIRI::FlatBuffers::DemInitBoxVolume> init_volume) {
    fbb_.AddOffset(CudaDemApp::VT_INIT_VOLUME, init_volume);
  }
  void add_max_particles_num(uint32_t max_particles_num) {
    fbb_.AddElement<uint32_t>(CudaDemApp::VT_MAX_PARTICLES_NUM, max_particles_num, 0);
  }
  void add_app_data(flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data) {
    fbb_.AddOffset(CudaDemApp::VT_APP_DATA, app_data);
  }
  void add_renderer_data(flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data) {
    fbb_.AddOffset(CudaDemApp::VT_RENDERER_DATA, renderer_data);
  }
  explicit CudaDemAppBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CudaDemApp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CudaDemApp>(end);
    return o;
  }
};

inline flatbuffers::Offset<CudaDemApp> CreateCudaDemApp(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaDemData> dem_data = 0,
    KIRI::FlatBuffers::CudaDemType dem_solver_type = KIRI::FlatBuffers::CudaDemType_DEM,
    flatbuffers::Offset<KIRI::FlatBuffers::DemInitBoxVolume> init_volume = 0,
    uint32_t max_particles_num = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data = 0) {
  CudaDemAppBuilder builder_(_fbb);
  builder_.add_renderer_data(renderer_data);
  builder_.add_app_data(app_data);
  builder_.add_max_particles_num(max_particles_num);
  builder_.add_init_volume(init_volume);
  builder_.add_dem_data(dem_data);
  builder_.add_dem_solver_type(dem_solver_type);
  return builder_.Finish();
}

inline const KIRI::FlatBuffers::CudaDemApp *GetCudaDemApp(const void *buf) {
  return flatbuffers::GetRoot<KIRI::FlatBuffers::CudaDemApp>(buf);
}

inline const KIRI::FlatBuffers::CudaDemApp *GetSizePrefixedCudaDemApp(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<KIRI::FlatBuffers::CudaDemApp>(buf);
}

inline bool VerifyCudaDemAppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<KIRI::FlatBuffers::CudaDemApp>(nullptr);
}

inline bool VerifySizePrefixedCudaDemAppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<KIRI::FlatBuffers::CudaDemApp>(nullptr);
}

inline void FinishCudaDemAppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaDemApp> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCudaDemAppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaDemApp> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_CUDADEMAPP_KIRI_FLATBUFFERS_H_
