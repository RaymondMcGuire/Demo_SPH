// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CUDAMULTISPHYAN16APP_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CUDAMULTISPHYAN16APP_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "app_data_generated.h"
#include "basic_types_generated.h"
#include "cuda_multisph_data_generated.h"
#include "cuda_sph_data_generated.h"
#include "renderer_data_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct CudaMultiSphYan16App;
struct CudaMultiSphYan16AppBuilder;

struct CudaMultiSphYan16App FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CudaMultiSphYan16AppBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MULTISPH_DATA = 4,
    VT_SPH_SOLVER_TYPE = 6,
    VT_INIT_VOLUME = 8,
    VT_MAX_PARTICLES_NUM = 10,
    VT_APP_DATA = 12,
    VT_RENDERER_DATA = 14
  };
  const KIRI::FlatBuffers::CudaMultiSphYan16Data *multisph_data() const {
    return GetPointer<const KIRI::FlatBuffers::CudaMultiSphYan16Data *>(VT_MULTISPH_DATA);
  }
  KIRI::FlatBuffers::CudaSphType sph_solver_type() const {
    return static_cast<KIRI::FlatBuffers::CudaSphType>(GetField<int8_t>(VT_SPH_SOLVER_TYPE, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>> *init_volume() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>> *>(VT_INIT_VOLUME);
  }
  uint32_t max_particles_num() const {
    return GetField<uint32_t>(VT_MAX_PARTICLES_NUM, 0);
  }
  const KIRI::FlatBuffers::AppData *app_data() const {
    return GetPointer<const KIRI::FlatBuffers::AppData *>(VT_APP_DATA);
  }
  const KIRI::FlatBuffers::SSFData *renderer_data() const {
    return GetPointer<const KIRI::FlatBuffers::SSFData *>(VT_RENDERER_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MULTISPH_DATA) &&
           verifier.VerifyTable(multisph_data()) &&
           VerifyField<int8_t>(verifier, VT_SPH_SOLVER_TYPE) &&
           VerifyOffset(verifier, VT_INIT_VOLUME) &&
           verifier.VerifyVector(init_volume()) &&
           verifier.VerifyVectorOfTables(init_volume()) &&
           VerifyField<uint32_t>(verifier, VT_MAX_PARTICLES_NUM) &&
           VerifyOffset(verifier, VT_APP_DATA) &&
           verifier.VerifyTable(app_data()) &&
           VerifyOffset(verifier, VT_RENDERER_DATA) &&
           verifier.VerifyTable(renderer_data()) &&
           verifier.EndTable();
  }
};

struct CudaMultiSphYan16AppBuilder {
  typedef CudaMultiSphYan16App Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_multisph_data(flatbuffers::Offset<KIRI::FlatBuffers::CudaMultiSphYan16Data> multisph_data) {
    fbb_.AddOffset(CudaMultiSphYan16App::VT_MULTISPH_DATA, multisph_data);
  }
  void add_sph_solver_type(KIRI::FlatBuffers::CudaSphType sph_solver_type) {
    fbb_.AddElement<int8_t>(CudaMultiSphYan16App::VT_SPH_SOLVER_TYPE, static_cast<int8_t>(sph_solver_type), 0);
  }
  void add_init_volume(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>>> init_volume) {
    fbb_.AddOffset(CudaMultiSphYan16App::VT_INIT_VOLUME, init_volume);
  }
  void add_max_particles_num(uint32_t max_particles_num) {
    fbb_.AddElement<uint32_t>(CudaMultiSphYan16App::VT_MAX_PARTICLES_NUM, max_particles_num, 0);
  }
  void add_app_data(flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data) {
    fbb_.AddOffset(CudaMultiSphYan16App::VT_APP_DATA, app_data);
  }
  void add_renderer_data(flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data) {
    fbb_.AddOffset(CudaMultiSphYan16App::VT_RENDERER_DATA, renderer_data);
  }
  explicit CudaMultiSphYan16AppBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CudaMultiSphYan16App> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CudaMultiSphYan16App>(end);
    return o;
  }
};

inline flatbuffers::Offset<CudaMultiSphYan16App> CreateCudaMultiSphYan16App(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaMultiSphYan16Data> multisph_data = 0,
    KIRI::FlatBuffers::CudaSphType sph_solver_type = KIRI::FlatBuffers::CudaSphType_SPH,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>>> init_volume = 0,
    uint32_t max_particles_num = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data = 0) {
  CudaMultiSphYan16AppBuilder builder_(_fbb);
  builder_.add_renderer_data(renderer_data);
  builder_.add_app_data(app_data);
  builder_.add_max_particles_num(max_particles_num);
  builder_.add_init_volume(init_volume);
  builder_.add_multisph_data(multisph_data);
  builder_.add_sph_solver_type(sph_solver_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<CudaMultiSphYan16App> CreateCudaMultiSphYan16AppDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaMultiSphYan16Data> multisph_data = 0,
    KIRI::FlatBuffers::CudaSphType sph_solver_type = KIRI::FlatBuffers::CudaSphType_SPH,
    const std::vector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>> *init_volume = nullptr,
    uint32_t max_particles_num = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data = 0) {
  auto init_volume__ = init_volume ? _fbb.CreateVector<flatbuffers::Offset<KIRI::FlatBuffers::MultiSphInitBoxVolume>>(*init_volume) : 0;
  return KIRI::FlatBuffers::CreateCudaMultiSphYan16App(
      _fbb,
      multisph_data,
      sph_solver_type,
      init_volume__,
      max_particles_num,
      app_data,
      renderer_data);
}

inline const KIRI::FlatBuffers::CudaMultiSphYan16App *GetCudaMultiSphYan16App(const void *buf) {
  return flatbuffers::GetRoot<KIRI::FlatBuffers::CudaMultiSphYan16App>(buf);
}

inline const KIRI::FlatBuffers::CudaMultiSphYan16App *GetSizePrefixedCudaMultiSphYan16App(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<KIRI::FlatBuffers::CudaMultiSphYan16App>(buf);
}

inline bool VerifyCudaMultiSphYan16AppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<KIRI::FlatBuffers::CudaMultiSphYan16App>(nullptr);
}

inline bool VerifySizePrefixedCudaMultiSphYan16AppBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<KIRI::FlatBuffers::CudaMultiSphYan16App>(nullptr);
}

inline void FinishCudaMultiSphYan16AppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaMultiSphYan16App> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCudaMultiSphYan16AppBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::CudaMultiSphYan16App> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_CUDAMULTISPHYAN16APP_KIRI_FLATBUFFERS_H_
