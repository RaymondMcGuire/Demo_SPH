// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SPHDEMSEEPAGEDATA_KIRI_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_SPHDEMSEEPAGEDATA_KIRI_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "app_data_generated.h"
#include "basic_types_generated.h"
#include "dem_data_generated.h"
#include "renderer_data_generated.h"
#include "sph_data_generated.h"

namespace KIRI {
namespace FlatBuffers {

struct SphDemSeepageData;
struct SphDemSeepageDataBuilder;

struct SphDemSeepageData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SphDemSeepageDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BOUNDARY_PARTICLE_RADIUS = 4,
    VT_DEM_DATA = 6,
    VT_DEM_INIT_DATA = 8,
    VT_DEM_C0 = 10,
    VT_DEM_CSAT = 12,
    VT_DEM_WET_COLOR = 14,
    VT_DRAG_COEFF = 16,
    VT_DEM_SHAPE_SAMPLING = 18,
    VT_SPH_DATA = 20,
    VT_SPH_INIT_DATA = 22,
    VT_SPH_EMITTER = 24,
    VT_MAX_PARTICLES_NUM = 26,
    VT_APP_DATA = 28,
    VT_RENDERER_DATA = 30
  };
  float boundary_particle_radius() const {
    return GetField<float>(VT_BOUNDARY_PARTICLE_RADIUS, 0.0f);
  }
  const KIRI::FlatBuffers::DemData *dem_data() const {
    return GetPointer<const KIRI::FlatBuffers::DemData *>(VT_DEM_DATA);
  }
  const KIRI::FlatBuffers::DemBoxEmitter *dem_init_data() const {
    return GetPointer<const KIRI::FlatBuffers::DemBoxEmitter *>(VT_DEM_INIT_DATA);
  }
  float dem_c0() const {
    return GetField<float>(VT_DEM_C0, 0.0f);
  }
  float dem_csat() const {
    return GetField<float>(VT_DEM_CSAT, 0.0f);
  }
  const KIRI::FlatBuffers::float3 *dem_wet_color() const {
    return GetStruct<const KIRI::FlatBuffers::float3 *>(VT_DEM_WET_COLOR);
  }
  float drag_coeff() const {
    return GetField<float>(VT_DRAG_COEFF, 0.0f);
  }
  const KIRI::FlatBuffers::DemShapeSampling *dem_shape_sampling() const {
    return GetPointer<const KIRI::FlatBuffers::DemShapeSampling *>(VT_DEM_SHAPE_SAMPLING);
  }
  const KIRI::FlatBuffers::SphData *sph_data() const {
    return GetPointer<const KIRI::FlatBuffers::SphData *>(VT_SPH_DATA);
  }
  const KIRI::FlatBuffers::SphBoxEmitter *sph_init_data() const {
    return GetPointer<const KIRI::FlatBuffers::SphBoxEmitter *>(VT_SPH_INIT_DATA);
  }
  const KIRI::FlatBuffers::SphDynamicEmitterPDS *sph_emitter() const {
    return GetPointer<const KIRI::FlatBuffers::SphDynamicEmitterPDS *>(VT_SPH_EMITTER);
  }
  uint32_t max_particles_num() const {
    return GetField<uint32_t>(VT_MAX_PARTICLES_NUM, 0);
  }
  const KIRI::FlatBuffers::AppData *app_data() const {
    return GetPointer<const KIRI::FlatBuffers::AppData *>(VT_APP_DATA);
  }
  const KIRI::FlatBuffers::SSFData *renderer_data() const {
    return GetPointer<const KIRI::FlatBuffers::SSFData *>(VT_RENDERER_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_BOUNDARY_PARTICLE_RADIUS) &&
           VerifyOffset(verifier, VT_DEM_DATA) &&
           verifier.VerifyTable(dem_data()) &&
           VerifyOffset(verifier, VT_DEM_INIT_DATA) &&
           verifier.VerifyTable(dem_init_data()) &&
           VerifyField<float>(verifier, VT_DEM_C0) &&
           VerifyField<float>(verifier, VT_DEM_CSAT) &&
           VerifyField<KIRI::FlatBuffers::float3>(verifier, VT_DEM_WET_COLOR) &&
           VerifyField<float>(verifier, VT_DRAG_COEFF) &&
           VerifyOffset(verifier, VT_DEM_SHAPE_SAMPLING) &&
           verifier.VerifyTable(dem_shape_sampling()) &&
           VerifyOffset(verifier, VT_SPH_DATA) &&
           verifier.VerifyTable(sph_data()) &&
           VerifyOffset(verifier, VT_SPH_INIT_DATA) &&
           verifier.VerifyTable(sph_init_data()) &&
           VerifyOffset(verifier, VT_SPH_EMITTER) &&
           verifier.VerifyTable(sph_emitter()) &&
           VerifyField<uint32_t>(verifier, VT_MAX_PARTICLES_NUM) &&
           VerifyOffset(verifier, VT_APP_DATA) &&
           verifier.VerifyTable(app_data()) &&
           VerifyOffset(verifier, VT_RENDERER_DATA) &&
           verifier.VerifyTable(renderer_data()) &&
           verifier.EndTable();
  }
};

struct SphDemSeepageDataBuilder {
  typedef SphDemSeepageData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_boundary_particle_radius(float boundary_particle_radius) {
    fbb_.AddElement<float>(SphDemSeepageData::VT_BOUNDARY_PARTICLE_RADIUS, boundary_particle_radius, 0.0f);
  }
  void add_dem_data(flatbuffers::Offset<KIRI::FlatBuffers::DemData> dem_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_DEM_DATA, dem_data);
  }
  void add_dem_init_data(flatbuffers::Offset<KIRI::FlatBuffers::DemBoxEmitter> dem_init_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_DEM_INIT_DATA, dem_init_data);
  }
  void add_dem_c0(float dem_c0) {
    fbb_.AddElement<float>(SphDemSeepageData::VT_DEM_C0, dem_c0, 0.0f);
  }
  void add_dem_csat(float dem_csat) {
    fbb_.AddElement<float>(SphDemSeepageData::VT_DEM_CSAT, dem_csat, 0.0f);
  }
  void add_dem_wet_color(const KIRI::FlatBuffers::float3 *dem_wet_color) {
    fbb_.AddStruct(SphDemSeepageData::VT_DEM_WET_COLOR, dem_wet_color);
  }
  void add_drag_coeff(float drag_coeff) {
    fbb_.AddElement<float>(SphDemSeepageData::VT_DRAG_COEFF, drag_coeff, 0.0f);
  }
  void add_dem_shape_sampling(flatbuffers::Offset<KIRI::FlatBuffers::DemShapeSampling> dem_shape_sampling) {
    fbb_.AddOffset(SphDemSeepageData::VT_DEM_SHAPE_SAMPLING, dem_shape_sampling);
  }
  void add_sph_data(flatbuffers::Offset<KIRI::FlatBuffers::SphData> sph_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_SPH_DATA, sph_data);
  }
  void add_sph_init_data(flatbuffers::Offset<KIRI::FlatBuffers::SphBoxEmitter> sph_init_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_SPH_INIT_DATA, sph_init_data);
  }
  void add_sph_emitter(flatbuffers::Offset<KIRI::FlatBuffers::SphDynamicEmitterPDS> sph_emitter) {
    fbb_.AddOffset(SphDemSeepageData::VT_SPH_EMITTER, sph_emitter);
  }
  void add_max_particles_num(uint32_t max_particles_num) {
    fbb_.AddElement<uint32_t>(SphDemSeepageData::VT_MAX_PARTICLES_NUM, max_particles_num, 0);
  }
  void add_app_data(flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_APP_DATA, app_data);
  }
  void add_renderer_data(flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data) {
    fbb_.AddOffset(SphDemSeepageData::VT_RENDERER_DATA, renderer_data);
  }
  explicit SphDemSeepageDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SphDemSeepageData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SphDemSeepageData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SphDemSeepageData> CreateSphDemSeepageData(
    flatbuffers::FlatBufferBuilder &_fbb,
    float boundary_particle_radius = 0.0f,
    flatbuffers::Offset<KIRI::FlatBuffers::DemData> dem_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::DemBoxEmitter> dem_init_data = 0,
    float dem_c0 = 0.0f,
    float dem_csat = 0.0f,
    const KIRI::FlatBuffers::float3 *dem_wet_color = 0,
    float drag_coeff = 0.0f,
    flatbuffers::Offset<KIRI::FlatBuffers::DemShapeSampling> dem_shape_sampling = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SphData> sph_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SphBoxEmitter> sph_init_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SphDynamicEmitterPDS> sph_emitter = 0,
    uint32_t max_particles_num = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::AppData> app_data = 0,
    flatbuffers::Offset<KIRI::FlatBuffers::SSFData> renderer_data = 0) {
  SphDemSeepageDataBuilder builder_(_fbb);
  builder_.add_renderer_data(renderer_data);
  builder_.add_app_data(app_data);
  builder_.add_max_particles_num(max_particles_num);
  builder_.add_sph_emitter(sph_emitter);
  builder_.add_sph_init_data(sph_init_data);
  builder_.add_sph_data(sph_data);
  builder_.add_dem_shape_sampling(dem_shape_sampling);
  builder_.add_drag_coeff(drag_coeff);
  builder_.add_dem_wet_color(dem_wet_color);
  builder_.add_dem_csat(dem_csat);
  builder_.add_dem_c0(dem_c0);
  builder_.add_dem_init_data(dem_init_data);
  builder_.add_dem_data(dem_data);
  builder_.add_boundary_particle_radius(boundary_particle_radius);
  return builder_.Finish();
}

inline const KIRI::FlatBuffers::SphDemSeepageData *GetSphDemSeepageData(const void *buf) {
  return flatbuffers::GetRoot<KIRI::FlatBuffers::SphDemSeepageData>(buf);
}

inline const KIRI::FlatBuffers::SphDemSeepageData *GetSizePrefixedSphDemSeepageData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<KIRI::FlatBuffers::SphDemSeepageData>(buf);
}

inline bool VerifySphDemSeepageDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<KIRI::FlatBuffers::SphDemSeepageData>(nullptr);
}

inline bool VerifySizePrefixedSphDemSeepageDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<KIRI::FlatBuffers::SphDemSeepageData>(nullptr);
}

inline void FinishSphDemSeepageDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::SphDemSeepageData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSphDemSeepageDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KIRI::FlatBuffers::SphDemSeepageData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatBuffers
}  // namespace KIRI

#endif  // FLATBUFFERS_GENERATED_SPHDEMSEEPAGEDATA_KIRI_FLATBUFFERS_H_
